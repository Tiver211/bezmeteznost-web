name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: tiver211/bezmeteznost_minecraft_web
  SSH_USER: tiver211
  SSH_HOST: bezmetejnost.ru
  PROJECT_DIR: /home/tiver211/web
  POSTGRES_VOLUME: postgres_data

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to VPS
        run: |
          ssh -o StrictHostKeyChecking=no ${{ env.SSH_USER }}@${{ env.SSH_HOST }} <<EOF
            docker login docker.io -u ${{ secrets.REGISTRY_USER }} -p ${{ secrets.REGISTRY_PASSWORD }}
            mkdir -p ${{ env.PROJECT_DIR }}
          EOF
          
          ls 
          scp docker-compose.yaml ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.PROJECT_DIR }}/docker-compose.yml
          scp -r nginx ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.PROJECT_DIR }}
          scp -r migrations ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:${{ env.PROJECT_DIR }}
        
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} <<EOF
            cd ${{ env.PROJECT_DIR }}
            echo "IMAGE_NAME=${{ env.IMAGE_NAME }}:${{ github.sha }}" > .env
            echo "POSTGRES_DATABASE=${{ secrets.POSTGRES_DATABASE }}" >> .env
            echo "POSTGRES_USERNAME=${{ secrets.POSTGRES_USERNAME }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "POSTGRES_CONN=postgresql://${{ secrets.POSTGRES_USERNAME }}:${{ secrets.POSTGRES_PASSWORD }}@postgres:5432/${{ secrets.POSTGRES_DATABASE }}" >> .env
            echo "RANDOM_SECRET=${{ secrets.RANDOM_SECRET }}" >> .env
            echo "CAPTCHA_TOKEN=${{ secrets.CAPTCHA_TOKEN }}" >> .env
            echo "POSTGRES_VOLUME=${{ env.POSTGRES_VOLUME }}" >> .env
            echo "SMTP_PASS=${{ secrets.SMTP_PASS }}" >> .env
            echo "SITE_KEY=${{ secrets.SITE_KEY }}" >> .env
          
            sudo docker compose stop || true

            sudo docker compose up -d
          EOF
      - name: Run Database Migrations
        run: |
          ssh ${{ env.SSH_USER }}@${{ env.SSH_HOST }} <<EOF
            cd ${{ env.PROJECT_DIR }}
            sudo docker compose exec app flask db upgrade
          EOF
        timeout-minutes: 5